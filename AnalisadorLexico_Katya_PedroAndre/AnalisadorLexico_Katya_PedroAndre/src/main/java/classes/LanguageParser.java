/* Generated By:JavaCC: Do not edit this line. LanguageParser.java */
package classes;

public class LanguageParser implements LanguageParserConstants {
    private StringBuilder resultado = new StringBuilder();

    public void leituraToken()  {
        try {
            Token token = null;
            token = getNextToken();
            System.out.println("KIND DO TOKEN LIDO: " + token.kind);
            if (token.kind == EOF) return;
            System.out.println("PALAVRA_RESERVADA: " + PALAVRA_RESERVADA);
            if (token.kind == PALAVRA_RESERVADA){
                resultado.append("Token: '" + token.image + "' - Tipo: 'PALAVRA_RESERVADA'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'PALAVRA_RESERVADA' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if (token.kind == IDENTIFICADOR){
                resultado.append("Token: '" + token.image + "' - Tipo: 'IDENTIFICADOR'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'IDENTIFICADOR' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == CONSTANTE_LITERAL){
                resultado.append("Token: '" + token.image + "' - Tipo: 'CONSTANTE_LITERAL'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'CONSTANTE_LITERAL' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == CONSTANTE_INTEIRO){
                resultado.append("Token: '" + token.image + "' - Tipo: 'CONSTANTE_INTEIRA'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'CONSTANTE_INTEIRA' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == CONSTANTE_REAL){
                resultado.append("Token: '" + token.image + "' - Tipo: 'CONSTANTE_REAL'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'CONSTANTE_REAL' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == SIMBOLO_ESPECIAL){
                resultado.append("Token: '" + token.image + "' - Tipo: 'SIMBOLO_ESPECIAL'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'SIMBOLO_ESPECIAL' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == OPERADOR_ARITMETICO){
                resultado.append("Token: '" + token.image + "' - Tipo: 'OPERADOR_ARITMETICO'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'OPERADOR_ARITMETICO' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == OPERADOR_RELACIONAL){
                resultado.append("Token: '" + token.image + "' - Tipo: 'OPERADOR_RELACIONAL'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'OPERADOR_RELACIONAL' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == OPERADOR_LOGICO){
                resultado.append("Token: '" + token.image + "' - Tipo: 'OPERADOR_LOGICO'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'OPERADOR_LOGICO' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == SIMBOLO_INVALIDO){
                resultado.append("Token: '" + token.image + "' - Tipo: 'SIMBOLO_INVALIDO'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'SIMBOLO_INVALIDO' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == CONSTANTE_LITERAL_INVALIDA){
                resultado.append("Token: '" + token.image + "' - Tipo: 'CONSTANTE_LITERAL_INVALIDA'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'CONSTANTE_LITERAL_INVALIDA' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == CONSTANTE_INTEIRA_INVALIDA){
                resultado.append("Token: '" + token.image + "' - Tipo: 'CONSTANTE_INTEIRA_INVALIDA'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'CONSTANTE_INTEIRA_INVALIDA' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == CONSTANTE_REAL_INVALIDA){
                resultado.append("Token: '" + token.image + "' - Tipo: 'CONSTANTE_REAL_INVALIDA'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'CONSTANTE_REAL_INVALIDA' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }else if(token.kind == IDENTIFICADOR_INVALIDO){
                resultado.append("Token: '" + token.image + "' - Tipo: 'IDENTIFICADOR_INVALIDO'  -  " + "ID: " +  token.kind + " - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
                System.out.println("Token: ['" + token.image + "'] - Tipo: 'IDENTIFICADOR_INVALIDO' -  " + "Id: '" +  token.kind + "' - Linha: '" + token.beginLine + "'  -  Coluna: '" + token.beginColumn + "'\n");
            }
            leituraToken();
        }catch(Error erro){
            resultado.append("Erro - " + erro.getMessage() + "\n");
            System.out.println(erro.toString());
            leituraToken();
        }
    }
    public String getTokens(String args[], String textoParaAnalisar) {
            LanguageParser languageParser;
            if(args.length == 0){
                System.out.println("#####################################");
                System.out.println("### Iniciando leitura dos tokens ...");
                System.out.println("#####################################");
                java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textoParaAnalisar.getBytes());
                languageParser = new LanguageParser(targetStream);
            }else if(args.length == 1){
                try{
                    languageParser = new LanguageParser(new java.io.FileInputStream(args[0]));
                }catch(java.io.FileNotFoundException e){
                    System.err.println(args[0] + " n\u00e3o foi encontrado." );
                    System.err.println(e);
                    return args[0] + " n\u00e3o foi encontrado.";
                }
            }else{
                System.out.println("Use:\njava Analisador Lexico < inputFile");
                System.out.println("ou java Analisador Lexico inputFile");
                return "Use:java Analisador Lexico < inputFile";
            }
            this.leituraToken();
            resultado.append("<EOF>");
            return resultado.toString();
        }

        public String getResultado(){
            return resultado.toString();
        }

  /** Generated Token Manager. */
  public LanguageParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }

  /** Constructor with InputStream. */
  public LanguageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LanguageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LanguageParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LanguageParser(LanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
